Future<Map> frequencyMap(String gene, int k) {
  List<String> kmers = generatePatterns(k);
  Map<String, int> map = {for (String nuc in kmers) nuc:0};
  for (int i = 0; i < (gene.length - k) + 1; i++) {
    map.update(gene.substring(i, i+k), (value) => value+1,);
  }
  Future<Map> futureMap = Future.value(map);
  return futureMap;
}

void main() async {
  Stopwatch timer = Stopwatch();
  timer.start();
  String unitTest = "GCCTAGTGGACACGCAAAGGAGGTCACGTCGCCAGCGGAGTGCGTGTTGAACCAAGAAGTATTTTACCCTGACATGTGACCCGGTGTCCTCGGTATGGTTAGTGCGAATCAGGGCGATTCGAATGATGATACCATCTCCGACTAGGAGGCTTTACCCCCTCAATCCTTATATCACACGACGGCAGATACCGTAAGGCCCCCACTTATTGCCCTCGTACGCAATTCACTAATCATATTCTGTATCAGGATACATAAAACCCGCGCCGAGAATCGGTATCATTACCTTCAATGTCAACCTTGCTGCTGTCTTCTGCCTCACTCTACAGGGTCTACCAACCGCGGCGAAGCCCTCTCATCCCGCTATATGCGGAATTTTGAACGTGCTGGCGATAGGCTGACCGCAGATTGAACGCTTTCTAAACATATAGCGGGGGTGAACTTTCACGCCGGAAACGTTTCCGGAAGCGCTCCAATATGTGCCATGCGAATTGAAGGACAGTGGGTGCTCCAAGATAGTTATCTGGGCCTACATGTGGGTTCGTTATATAAGGAACCTTTCTCAGCTCACATCCCCTGCGGGTGTAGCTCCCTACGATGGGGTACATAAGCCGAAGGTTGAAGATCTAATCATTGTTCAGTGTCCAAGTT";
  Map myMap = await frequencyMap(unitTest, 7);
  print(myMap);
  print(myMap.values.toList().join(" "));
  timer.stop();
  print('Time elapsed: ${timer.elapsed}');
  timer.reset();
}
